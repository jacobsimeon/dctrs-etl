// Generated by CoffeeScript 1.7.1
(function() {
  var DctrPart;

  DctrPart = (function() {
    function DctrPart(row, attrsBuilder) {
      this.row = row;
      if (attrsBuilder == null) {
        attrsBuilder = (function(_this) {
          return function() {};
        })(this);
      }
      this._attrs = {};
      attrsBuilder.apply(this);
    }

    DctrPart.prototype.k = function(keyIndex, keyName, converter) {
      var val;
      if (converter == null) {
        converter = this.titleCase;
      }
      val = this.row[keyIndex];
      return this.kv(keyName, val, converter);
    };

    DctrPart.prototype.kv = function(key, value, converter) {
      if (converter == null) {
        converter = this.literal;
      }
      if (!this.isEmpty(value)) {
        return this._attrs[key] = converter.apply(this, [value]);
      }
    };

    DctrPart.prototype.isEmpty = function(val) {
      return (val == null) || val === '' || typeof val === 'number' && isNaN(val);
    };

    DctrPart.prototype.literal = function(v) {
      return v;
    };

    DctrPart.prototype.int = function(v) {
      return parseInt(v);
    };

    DctrPart.prototype.string = function(v) {
      return ((v != null) && v.toString()) || "";
    };

    DctrPart.prototype.lowerCase = function(v) {
      return this.string(v).toLowerCase();
    };

    DctrPart.prototype.capitalize = function(v) {
      if (v === "") {
        return v;
      }
      v = this.string(v).toLowerCase();
      return "" + (v[0].toUpperCase()) + v.slice(1);
    };

    DctrPart.prototype.titleCase = function(v) {
      var word;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.string(v).split(" ");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          word = _ref[_i];
          _results.push(this.capitalize(word));
        }
        return _results;
      }).call(this)).join(" ");
    };

    DctrPart.prototype.toDate = function(v) {
      var date, epoch;
      epoch = Date.parse(v);
      if (isNaN(epoch)) {
        return null;
      } else {
        date = new Date(v);
        return "" + (date.getFullYear()) + "-" + (this.pad(date.getMonth() + 1)) + "-" + (this.pad(date.getDate()));
      }
    };

    DctrPart.prototype.toBoolean = function(v) {
      switch (v) {
        case "y":
        case "Y":
          return true;
        case "n":
        case "N":
          return false;
        default:
          return null;
      }
    };

    DctrPart.prototype.toEntityType = function(v) {
      switch (this.int(v)) {
        case 1:
          return "Individual";
        case 2:
          return "Organization";
        default:
          return null;
      }
    };

    DctrPart.prototype.toIdentifierType = function(v) {
      switch (this.int(v)) {
        case 1:
          return "Other";
        case 2:
          return "Medicare UPIN";
        case 4:
          return "Medicare ID";
        case 5:
          return "Medicaid";
        case 6:
          return "Medicare OSCAR/Certification";
        case 7:
          return "Medicare NSC";
        case 8:
          return "Medicare PIN";
        default:
          return null;
      }
    };

    DctrPart.prototype.pad = function(number, pad) {
      var n;
      if (pad == null) {
        pad = 2;
      }
      n = Math.pow(10, pad);
      if (number < n) {
        return ("" + (n + number)).slice(1);
      } else {
        return "" + number;
      }
    };

    return DctrPart;

  })();

  module.exports = DctrPart;

}).call(this);
