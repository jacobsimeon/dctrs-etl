// Generated by CoffeeScript 1.7.1
(function() {
  var Dctr, DctrPart, Taxonomies, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  DctrPart = require("./dctr_part");

  Taxonomies = require('./taxonomies');

  Dctr = (function(_super) {
    __extends(Dctr, _super);

    function Dctr(row) {
      this.row = row;
      this.buildAttrs();
    }

    Dctr.prototype.meta = function() {
      return JSON.stringify(this.metaAttrs());
    };

    Dctr.prototype.json = function() {
      return JSON.stringify(this.attrs());
    };

    Dctr.prototype.attrs = function() {
      return this._attrs;
    };

    Dctr.prototype.metaAttrs = function() {
      return {
        create: {
          _index: "dctrs",
          _type: "provider",
          _id: this.row[0]
        }
      };
    };

    Dctr.prototype.buildAttrs = function() {
      var root;
      root = this.part(function() {
        this.k(0, "npi", this.literal);
        this.k(1, "entity_type", this.toEntityType);
        this.k(4, "organization_name");
        this.k(5, "last_name");
        this.k(6, "first_name");
        this.k(7, "middle_name");
        this.k(8, "prefix");
        this.k(9, "suffix");
        this.k(10, "credential", this.literal);
        this.k(41, "gender", this.literal);
        this.k(36, "enumerated_on", this.toDate);
        this.k(37, "updated_on", this.toDate);
        this.k(39, "deactivated_on", this.toDate);
        this.k(40, "reactivated_on", this.toDate);
        this.k(307, "sole_proprietor", this.toBoolean);
        this.k(308, "subpart", this.toBoolean);
        return this.k(309, "parent_org_lbn", this.literal);
      });
      root.other_org = this.part(function() {
        this.k(11, "name");
        this.k(13, "last_name");
        this.k(14, "first_name");
        this.k(15, "middle_name", this.literal);
        this.k(16, "prefix");
        this.k(17, "suffix");
        return this.k(18, "credential", this.literal);
      });
      root.mailing_address = this.part(function() {
        this.k(20, "street");
        this.k(21, "street_second_line");
        this.k(22, "city");
        this.k(23, "state", this.literal);
        this.k(24, "postal_code", this.literal);
        this.k(25, "country_code", this.literal);
        this.k(26, "phone", this.literal);
        return this.k(27, "fax", this.literal);
      });
      root.practice_address = this.part(function() {
        this.k(28, "street");
        this.k(29, "street_second_line");
        this.k(30, "city");
        this.k(31, "state", this.literal);
        this.k(32, "postal_code", this.literal);
        this.k(33, "country_code", this.literal);
        this.k(34, "phone", this.literal);
        return this.k(35, "fax", this.literal);
      });
      root.authorized_official = this.part(function() {
        this.k(42, "last_name");
        this.k(43, "first_name");
        this.k(44, "middle_name");
        this.k(45, "title", this.literal);
        this.k(46, "phone", this.string);
        this.k(311, "prefix");
        this.k(312, "suffix");
        return this.k(313, "credential", this.literal);
      });
      root.specialties = this.buildSpecialties();
      root.other_identifiers = this.buildIdentifiers();
      return this._attrs = root;
    };

    Dctr.prototype.buildSpecialties = function() {
      var rawSpecialties, _i, _results;
      return rawSpecialties = this.partition((function() {
        _results = [];
        for (_i = 47; _i <= 106; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), 4, function(group) {
        var specialty;
        this.k(group[0], "taxonomy_code", this.literal);
        this.k(group[1], "license_number", this.literal);
        this.k(group[2], "state", this.literal);
        this.k(group[3], "primary", this.toBoolean);
        specialty = Taxonomies.findTaxonomy(this._attrs.taxonomy_code);
        this.kv("type", specialty["type"]);
        this.kv("classification", specialty["classification"]);
        return this.kv("specialization", specialty["specialization"]);
      });
    };

    Dctr.prototype.buildIdentifiers = function() {
      var _i, _results;
      return this.partition((function() {
        _results = [];
        for (_i = 107; _i <= 306; _i++){ _results.push(_i); }
        return _results;
      }).apply(this), 4, function(group) {
        this.k(group[0], "identifier", this.string);
        this.k(group[1], "type", this.toIdentifierType);
        this.k(group[2], "state", this.literal);
        return this.k(group[3], "issuer", this.literal);
      });
    };

    Dctr.prototype.part = function(spec) {
      return new DctrPart(this.row, spec)._attrs;
    };

    Dctr.prototype.partition = function(range, partitionSize, transform) {
      var group, groups, i;
      groups = (function() {
        var _i, _j, _len, _ref, _results, _results1;
        _results = [];
        for ((partitionSize > 0 ? (_i = 0, _len = range.length) : _i = range.length - 1); partitionSize > 0 ? _i < _len : _i >= 0; _i += partitionSize) {
          i = range[_i];
          _results.push((function() {
            _results1 = [];
            for (var _j = i, _ref = i + partitionSize; i <= _ref ? _j <= _ref : _j >= _ref; i <= _ref ? _j++ : _j--){ _results1.push(_j); }
            return _results1;
          }).apply(this));
        }
        return _results;
      })();
      return _.compact((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = groups.length; _i < _len; _i++) {
          group = groups[_i];
          _results.push(this.transformGroup(group, transform));
        }
        return _results;
      }).call(this));
    };

    Dctr.prototype.transformGroup = function(group, transform) {
      var item;
      item = this.part(function() {
        return transform.apply(this, [group]);
      });
      if ((item != null) && _.keys(item).length > 0) {
        return item;
      }
    };

    return Dctr;

  })(DctrPart);

  module.exports = Dctr;

}).call(this);
